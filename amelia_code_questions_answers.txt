Find the sum of an array of ints.

def sum(myArr):
    sum = 0
    for i in myArr:
        sum = i + sum
    return sum

Does this code change if one of the numbers is a float? If so, how?

Write a solution to FizzBuzz.

for num in xrange(1,101):
    msg = ''
    if num % 3 == 0:
        msg += 'Fizz'
    if num % 5 == 0:       # no more elif
        msg += 'Buzz'
    if not msg:      # check if msg is an empty string
        msg += str(num)
    print msg

If you wanted to refactor this recursively, how would you?

def fizzbuzz(n):
    result = ''
    for i in range(1,n+1):
        if   i % 15 == 0: result += 'fizzbuzz '
        elif i %  5 == 0: result += 'buzz '
        elif i %  3 == 0: result += 'fizz '
        else            : result += '%d ' % i
    return result

Implement a linear search.

def linear_search(items, desired_item):
    for position, item in enumerate(items):
        if item == desired_item:
            return position

    raise ValueError("%s was not found in the list." % desired_item)

Complete the following code which will perform a selection sort in Python. ”...” denotes missing code that should be filled in:

def selection_sort(items):
    """Sorts a list of items into ascending order using the
       selection sort algoright.
       """
    for step in range(len(items)):
        # Find the location of the smallest element in
        # items[step:].
        location_of_smallest = step
        for location in range(step, len(items)):
            # TODO: determine location of smallest
            ...
        # TODO: Exchange items[step] with items[location_of_smallest]
        ...

def selection_sort(items):
    """Sorts a list of items into ascending order using the
       selection sort algoright.
       """
    for step in range(len(items)):
        # Find the location of the smallest element in
        # items[step:].
        location_of_smallest = step
        for location in range(step, len(items)):
            # determine location of smallest
            if items[location] < items[location_of_smallest]:
                location_of_smallest = location
        # Exchange items[step] with items[location_of_smallest]
        temporary_item = items[step]
        items[step] = items[location_of_smallest]
        items[location_of_smallest] = temporary_item

from sets import Set

def max_seq(a):
    max_val = 0
    cumsum = 0
    for val in a :
        cumsum += val
        if cumsum < 0 : cumsum = 0
        max_val = max(max_val, cumsum)
    return max_val

l = lambda n: map(lambda x : [], range(0,n))

Searching for a maximum-sum subsequence

Looking at the table below, it is easy to verify that the maximum possible sum of adjacent numbers in any direction (horizontal, vertical, diagonal or anti-diagonal) is 16 (= 8 + 7 + 1).

−2	5	3	2
9	−6	5	1
3	2	7	3
−1	8	−4	  8

Now, let us repeat the search, but on a much larger scale:

First, generate four million pseudo-random numbers using a specific form of what is known as a "Lagged Fibonacci Generator":

For 1 ≤ k ≤ 55, sk = [100003 − 200003k + 300007k3] (modulo 1000000) − 500000.
For 56 ≤ k ≤ 4000000, sk = [sk−24 + sk−55 + 1000000] (modulo 1000000) − 500000.

Thus, s10 = −393027 and s100 = 86613.

The terms of s are then arranged in a 2000×2000 table, using the first 2000 numbers to fill the first row (sequentially), the next 2000 numbers to fill the second row, and so on.

Finally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal).
    
def gen():
    a = {}
    for k in range(1, 56) :
        a[k-1] = ((100003 - 200003*k + 300007*k*k*k) % 1000000) - 500000
    for k in range(56, 4000001) :
        a[k-1] = ((a[k-25] + a[k-56] + 1000000) % 1000000) - 500000
    return a   

a = gen()

def look(n):
    l1,l2,l3,l4 = l(n), l(n), l(n*2), l(n*2)
    ll = [l1,l2,l3,l4]
    for i in range(0, n) :
        for j in range(0, n) :
            x = a[n*i+j]
            l1[i].append(x)
            l2[j].append(x)
            l3[i+j].append(x)
            l4[i-j + n].append(x)
    max_val = 0
    for lists in ll :
        for list in lists :
            max_val = max(max_val, max_seq(list))
    return max_val

print look(2000)

Answer: 52852124

Initalize a tree in Python.

class Tree(object):
    def __init__(self):
        self.left = None
        self.right = None
        self.data = None

Given a binary tree, check whether it’s a binary search tree or not.

def isBST(tree, lastNode=[NEG_INFINITY]):
    if tree is None:
        return True
 
    if not isBST(tree.left, lastNode):
        return False
 
    if tree.val < lastNode[0]:
        return False
 
    lastNode[0]=tree.val
 
    return isBST(tree.right, lastNode)

Demonstrate class inheritence in Python.

class Pet(object):

    def __init__(self, name, species):
        self.name = name
        self.species = species

    def getName(self):
        return self.name

    def getSpecies(self):
        return self.species

    def __str__(self):
        return "%s is a %s" % (self.name, self.species)

 class Dog(Pet):

    def __init__(self, name, chases_cats):
        Pet.__init__(self, name, "Dog")
        self.chases_cats = chases_cats

    def chasesCats(self):
        return self.chases_cats